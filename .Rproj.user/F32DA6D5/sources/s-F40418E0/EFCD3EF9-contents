# Matematiksel İfadeler

Matematik formüllerini dizmek, kuşkusuz, LaTeX'in en güçlü olduğu
konulardan biridir. Çok fazla matematiksel gösterimin varlığından dolayı
da büyük bir konudur. Bu bölümde ileri bir
matematik kitabını dizmek için gereken birçok şey anlatılacaktır ancak
işin sınırları göz önüne alındığında başka kaynaklara da başvurmanız
gerekebilir.

## Giriş

Belgenizde yalnızca birkaç basit matematiksel formül kullanacaksanız
herhangi bir pakete gerek olmadan yazabilirsiniz. Ancak çok sayıda
karmaşık formül içeren bilimsel bir belge yazma niyetindeyseniz temel
[AMS](https://www.ams.org/publications/authors/tex/amslatex){texel="noreferrer noopener"
target="_blank"} paketlerini kullanmanız gerekir. Bu paketler
[amsmath](http://ftp.ntua.gr/mirror/ctan/macros/latex/required/amsmath/amsmath.pdf){texel="noreferrer noopener"
target="_blank"} ,
[amssymb](https://texdoc.net/texmf-dist/doc/fonts/amsfonts/amssymb.pdf){texel="noreferrer noopener"
target="_blank"} ve
[amsfonts](http://ftp.ntua.gr/mirror/ctan/fonts/amsfonts/doc/amsfonts.pdf){texel="noreferrer noopener"
target="_blank"}'dir.


```latex
\usepackage{amsmath,amssymb,amsfonts}
```

Yukarıdaki komutu sahanlığa yazarak paketleri belgenize ekleyiniz.
Bundan sonra bu paketleri eklediğinizi varsayarak devam edeceğiz ve
bunların dışında bir pakete ihtiyaç duyarsak ayrıca belirteceğiz.

### Genel

Belgenizin metnini oluştururken LaTeX'in metnin ne zaman matematiksel
olduğunu bilmesi gerekir. Bunun nedeni, LaTeX'in matematiksel ifadeleri
normal metinden farklı bir şekilde dizmesidir. Bu nedenle matematiksel
ifadeler, normal metinden farklı olarak bazı ortamlarda girilirler.

Matematik özel ortamlar gerektirdiğinden, doğal olarak standart şekilde
kullanabileceğiniz uygun ortam adları vardır. Bununla birlikte, diğer
ortamların çoğundan farklı olarak, formülünüzü bildirmek için bazı
kullanışlı kısaltmalar vardır. LaTeX'de bu ortamlar ya da kısaltmalar
kullanılarak formüller iki türlü dizilir:

-   Formüller satırın içinde, yani bildirildiği metnin gövdesi içine
    yazılır: \(\lim_{n \to \infty} \sum_{k=1}^n \frac{1}{k^2}
    =\frac{\pi^2}{6}\). Görüldüğü gibi LaTeX, paragraf yapısını
    bozmamak için sembolleri olabildiğince sıkıştırır ve gerek görürse
    alttakileri yana kaydırır.
-   Formüller ayrı bir satırda tek başlarına tüm detaylarıyla
    sergilenir: \[\lim_{n \to \infty} \sum_{k=1}^n
    \frac{1}{k^2} =\frac{\pi^2}{6}.\]

Formülün satır içerisinde dizilmesi için ya `$...$` arasına arasına, ya
`\(...\)` arasına ya da `\begin{math}` ile `\end{math}`arasına, yani
`math` ortamında yazılması gerekir. Üçü de aynı sonucu verir.

Formülün sergilenmesi içinse ya `\[...\]` arasına ya `displaymath`
ortamında ya da `equation` ortamında yazılması gerekir.
`equation `ortamında yazılan formülü LaTeX otomatik numaralandırır.
Numara verilmesini istemezseniz ortamı `equation*` şeklinde kullanmanız
gerekir.

> TeX'in eski sürümlerinde formüller, sergilenmeleri için `$$...$$`
> arasına yazılırdı. Bu kullanım hala geçerlidir ancak bazı sorunlara
> yol açabildiğinden (örneğin belge seçeneğine `fleqn` yazıldığında)
> kullanımı önerilmez.


```latex
$x\in \mathbb{R}$ için $|x|<1$ ise
\begin{equation*}
 -1<x<1
\end{equation*}
olur.
```

$x\in\mathbb{R}$ için $|x|<1$ ise
\begin{equation*}
 -1<x<1
\end{equation*}
olur.


Numara verilen bir formülü `\label` komutuyla etiketleyip, `\ref` ya da
`\eqref` komutuyla formüle atıf yapılabilir. Atıf `\eqref` komutuyla
yapılırsa formülün numarası parantez içinde yazılır.


```latex
\begin{equation}
\label{eq:euler}
  e^{i\pi}+1=0
\end{equation}
Euler'in \eqref{eq:euler} formülüne göre\dots
```

\begin{equation}
 e^{i\pi}+1=0
 (\#eq:euler)
\end{equation}
Euler'in \@ref(eq:euler) formülüne göre...


### Matematik Kipiyle Metin Kipi Arasındaki Farklar

Matematiksel ifadeleri girerken düz metin girişinden farklı olarak
dikkat edilmesi gereken bazı noktalar vardır:

1.  Boşlukların ve satır kesmelerinin çoğunun önemi yoktur, çünkü tüm
    boşluklar ya matematiksel ifadelerden mantıksal olarak türetilir, ya
    da özel komutlarla belirtilmesi gerekir.
2.  Boş satırlara izin verilmez.
3.  Aksanlı harfler kullanılmaz.
4.  Her harf matematiksel bir değişken olarak kabul edilir ve italik
    dizilir. Eğer düz yazıyla ve normal aralıklarla bir metin
    girilecekse `\textrm{}` ya da `\text{}` komutları kullanılmalıdır.
    Bu komutlarla metin kipine geçiş yapılmış olur ve metin artık düz ve
    normal aralıklarla dizilir. İtalik ve normal aralıklarla metin
    girilecekse `\textit{}` komutu kullanılabilir. Ayrıca bu komutlarla
    aksanlı harfler de kullanılabilir.

Aşağıdaki örnek matematik kipi ile metin kipi arasındaki farkları
gösterir.


```latex
$x^2-1=0 \text{ise $x=\pm 1$}.$
```



$x^2-1=0 \text{ise $x=\pm 1$}.$


### Gruplandırma

Formülleri dizerken dikkat edilmesi gereken noktalardan biri komutların
çoğunun kendisinden sonra ilk gelen karaktere etki etmesidir. Bu yüzden
bir komutun çok sayıda karaktere etki etmesi istenirse bu karakterler
iki çengelli parantez `{…}` arasına yazılarak gruplandırılmalıdır.


```latex
$a^x+y \neq a^{x+y}$
```

$a^x+y \neq a^{x+y}$


## Parantezler, Gruplandırıcılar ve Oklar


LaTeX'de her türlü parantez ve gruplandırıcı kullanılabilir. Yuvarlak ve
köşeli parantezler klavyedeki yerlerinden, çengelli parantez ise `\{` ve
`\}` komutları kullanılarak girilir.


```latex
${a,b,c}\neq\{a,b,c\}$
```

${a,b,c}\neq\{a,b,c\}$


Kullanılabilecek tüm gruplandırıcı işaretler aşağıdaki tabloda
gösterilmiştir.


|    |     |    |
|:---|:----|:---|
|( `(`   ) `)`           |  $\uparrow$ `\uparrow`    |  $[$ `[` ya da `\lbrack` |
|$]$ `]` ya da `\rbrack`|  $\downarrow$ `\downarrow`|  $\lbrace$ `\{` ya da `\lbrace`| 
|$\rbrace$ `\}` ya da `\rbrace`|   $\updownarrow$ `\updownarrow`|   $\langle$ `\langle`|
|$\rangle$ `\rangle`  |    $\vert$ `|` ya da `\vert`|   $\lfloor$ `\lfloor`  |
|$\rfloor$ `\rfloor` |     $\lceil$ `\lceil`    |       $\rceil$ `\rceil`  |
|$/$ `/`      |            $\backslash$ `\backslash` |  $\Updownarrow$ `\Updownarrow`| |$\Uparrow$ `\Uparrow` |   $\Downarrow$ `\Downarrow` |  $\|$ `\|` ya da `\Vert` |             


Grup açıcı bir sembolün önüne `\left` komutu, grup kapatıcı bir sembolün
önüne de `\right` komutu yazılırsa LaTeX onları en uygun boyda dizer.
Her bir `\left` komutuna karşılık mutlaka bir `\right` komutu
bulunmalıdır. Bunların doğru boyda dizilmesi için iki komutunda aynı
satırda yer almasına dikkat edilmelidir. Sol/sağ tarafta gruplandırıcı
bir işaret istenmiyorsa, görünmeyen `\left.`/`\right.` komutu
kullanılır.


```latex
\[
\left(1+\frac{1}{n}\right)^n\quad
\left.\frac{x^3}{3}\right|_0^1
\]
```



\[
\left(1+\frac{1}{n}\right)^n\quad
\left.\frac{x^3}{3}\right|_0^1
\]


Bazen gruplandırıcı sembolün boyunu elle ayarlamak gerekebilir. Bunun
için, gruplandırıcı komutun önüne `\big`, `\Big`, `\bigg` veya `\Bigg`
komutlarından biri verilir. `\bigl` (büyük sol) ve `\bigr` (büyük sağ)
komutları da parantezleri biraz büyütür.


```latex
\[
\big(\Big(\bigg(\Bigg(\quad
\big\}\Big\}\bigg\}\Bigg\}
\quad
\big\|\Big\|\bigg\|\Bigg\|
\]
```



\[
\big(\Big(\bigg(\Bigg(\quad
\big\}\Big\}\bigg\}\Bigg\}
\quad
\big\|\Big\|\bigg\|\Bigg\|
\]


Oklar için aşağıdaki komutlar kullanılır.

|   |   |   |   |
|:--|:--|:--|:--|
|$\leftarrow$ `\leftarrow` ya da `\gets`|$\longleftarrow$ `\longleftarrow`|        $\uparrow$ `\uparrow`|$\Leftarrow$ `\Leftarrow`|
|$\Longleftarrow$ `\Longleftarrow`|$\Uparrow$ `\Uparrow`|$\rightarrow$ `\rightarrow` ya da `\to`|$\longrightarrow$ `\longrightarrow`|
|$\downarrow$ `\downarrow` | $\Rightarrow$ `\Rightarrow`|               $\Longrightarrow$ `\Longrightarrow`|$\Downarrow$ `\Downarrow` |
|$\leftrightarrow$ `\leftrightarrow`|$\longleftrightarrow$ `\longleftrightarrow`|   $\updownarrow$ `\updownarrow`|$\Leftrightarrow$ `\Leftrightarrow`|
|$\Longleftrightarrow$ `\Longleftrightarrow`| $\Updownarrow$ `\Updownarrow`|          $\mapsto$ `\mapsto`|$\longmapsto$ `\longmapsto`|  
|$\nearrow$ `\nearrow`|$\hookleftarrow$ `\hookleftarrow`|$\hookrightarrow$ `\hookrightarrow`|$\searrow$ `\searrow`|
|$\leftharpoonup$ `\leftharpoonup`    |         $\rightharpoonup$ `\rightharpoonup`|    $\swarrow$ `\swarrow`|$\leftharpoondown$ `\leftharpoondown`|
 | $\rightharpoondown$ `\rightharpoondown`     |  $\nwarrow$ `\nwarrow`      |                   $\rightleftharpoons$ `\rightleftharpoons`  | $\leadsto$ `\leadsto`|


```latex
\(
\downarrow
\big\downarrow
\Big\downarrow
\bigg\downarrow
\Bigg\downarrow
\)
```


\(
\downarrow
\big\downarrow
\Big\downarrow
\bigg\downarrow
\Bigg\downarrow
\)


Bunların dışında altlarına ya da üstlerine matematiksel ifadeler
yazılabilen `\xleftarrow` ve `\xrightarrow` komutları vardır.


```latex
\(
\xleftarrow{a}
\xrightarrow[X]{a+b}
\)
```


$\xleftarrow{a}$
$\xrightarrow[X]{a+b}$


## Yunan Harfleri

Yunan harfleri matematikte yaygın olarak kullanılır. Bu harfler ters eğik çizgiden sonra harfin adı yazılarak elde edilir. Eğer ilk harf küçük ise küçük, büyükse de büyük harf elde edilir. Bazı büyük Yunanca harfler Latin harfleri gibi göründüğünden (örneğin, büyük harf Alpha ve Beta yalnızca sırasıyla "A" ve "B"dir) ayrıca tanımlanmamışlardır. Küçük harf epsilon, theta, kappa, phi, pi, rho ve sigma iki farklı sürümde sunulmaktadır. Alternatif sürümü, harf adının önüne “var” eklenerek oluşturulur.

  |                           |                               |                            |                           |
  |           :--             |              :--                  |    :--                |         :--               |
  |  $\alpha$ `\alpha`         |         $\theta$ `\theta`       |       $o$ `o`             |           $\tau$ `\tau` | 
  |  $\beta$ `\beta`             |       $\vartheta$ `\vartheta`  |      $\pi$ `\pi`          |     $\upsilon$ `\upsilon` | 
  |  $\gamma$ `\gamma`          |        $\iota$ `\iota`         |       $\varpi$ `\varpi`     |         $\phi$ `\phi` | 
   | $\delta$ `\delta`           |       $\kappa$ `\kappa`      |        $\rho$ `\rho`        |          $\varphi$ `\varphi` | 
   | $\epsilon$ `\epsilon`      |        $\lambda$ `\lambda`   |         $\varrho$ `\varrho`   |         $\chi$ `\chi` | 
   | $\varepsilon$ `\varepsilon` |       $\mu$ `\mu`           |         $\sigma$ `\sigma`     |         $\psi$ `\psi` | 
   | $\zeta$ `\zeta`             |       $\nu$ `\nu`          |          $\varsigma$ `\varsigma` |       $\omega$ `\omega` | 
   | $\eta$ `\eta`               |       $\xi$ `\xi`          |                               |        | 
    |                             |                             |                                     
   | $\Gamma$ `\Gamma`            |      $\Lambda$ `\Lambda`    |        $\Sigma$ `\Sigma`    |          $\Psi$ `\Psi` | 
  |  $\Delta$ `\Delta`            |      $\Xi$ `\Xi`           |         $\Upsilon$ `\Upsilon`  |        $\Omega$ `\Omega` | 
   | $\Theta$ `\Theta`             |     $\Pi$ `\Pi`           |         $\Phi$ `\Phi`       |        

```latex
$\forall \epsilon>0$ için
```

$\forall \epsilon>0$ için


## Fonksiyonlar

LaTeX'de fonksiyonlar aşağıdaki komutlarla dizilirler.

`\arccos  \cos  \csc  \exp  \ker  \limsup  \min  \sinh \arcsin  \cosh  \deg  \gcd  \lg  \ln  \Pr  \sup \arctan  \cot  \det  \hom  \lim  \log  \sec  \tan \arg  \coth  \dim  \inf  \liminf  \max  \sin  \tanh`

Matematik kipinde fonksiyonlar diğer değişkenler gibi italik değil düz
yazılırlar ve boşluklar otomatik ayarlanır.


```latex
$\sin x$, $\exp x$, $\log x$,
$\det A$, $\min_{x\in A} f(x)$
```

$\sin x$, $\exp x$, $\log x$, $\det A$, $\min_{x\in A} f(x)$


Bunların dışında bir fonksiyon tanımlamak için `\DeclareMathOperator`
komutu kullanılır.


```latex
\DeclareMathOperator{\obeb}{obeb}
```


Yukarıdaki komuttan sonra artık kullanabileceğiniz bir "obeb" fonksiyonu
olur.


```latex
$\obeb(12,16)=4$
```



$\obeb(12,16)=4$

Bu komutun sınır değerleri sağ taraf yerine alta dizen yıldızlı sürümü
vardır: `\DeclareMathOperator*`. Örneğin
`\DeclareMathOperator*{\Max}{Max}` komutunu sahanlıkta verdikten sonra
belgede kullanırsanız şöyle bir çıktı alırsınız:


```latex
\begin{equation*}
 \Max_{x\in A} f(x)
\end{equation*}
```



\begin{equation*}
 \Max_{x\in A} f(x)
\end{equation*}


Modülo fonksiyonu içinse `\mod` ya da `\pmod` komutları verilir. İkinci
komut fonksiyonu parantez içinde yazar.


```latex
$a\equiv b\pmod p$ ise $p\mid a-b$'dir.
```



$a\equiv b\pmod p$ ise $p\mid a-b$'dir.


Limit için `\lim` komutu aşağıdaki şekilde verilir.


```latex
\lim_{<değişken> \to <değişken>}
```


Buradaki `\to` komutu $\to$ üretir ve $\infty$ için `\infty`
komutu verilir.


```latex
\[
\lim_{x\to 0}
\frac{\sin x}{x}=1 \qquad
\lim_{n\to +\infty}f_n=\delta
\]
```



\[
\lim_{x\to 0}
\frac{\sin x}{x}=1 \qquad
\lim_{n\to +\infty}f_n=\delta
\]


## Yığın Simgeleri

Matematikte bazen bir ifadenin altına ya da üstüne başka ifadeler yazmak
gerekebilir. Bunlar yığın simgeleri olarak adlandırılırlar.

LaTeX'de aşağıdaki


```latex
\overset{<birinci değişken>}{<ikinci değişken>}
```


komutu birinci değişkendeki sembolü, normal boyda yazılan ikincinin
üzerine yazar. `\underset` komutu ise alta yazar.


```latex
\[
\overset{R}{\sim}
\]
```
\[
\overset{R}{\sim}
\]

`\overline` ve `\underline` komutları bir ifadenin üstüne veya altına
yatay bir çizgi çekerler.


```latex
\[
\overline{x+y}
\]
```
\[
\overline{x+y}
\]

`\overbrace` ve `\underbrace` komutları bir ifadenin üstüne veya altına
yatay bir çengel atarlar.


```latex
\[
\underbrace{1+2+\dots+n}_{{}=
\frac{n(n+1)}{2}}
+(n+1)
\]
```
\[
\underbrace{1+2+\dots+n}_{{}=
\frac{n(n+1)}{2}}
+(n+1)
\]

`\overleftarrow` komutu ifadenin üstüne sola, `\overrightarrow` ise sağa
bir ok çizer. Bu komutlar vektörleri göstermek için kullanılabilir.
Vektörler için `\vec` komutu da kullanılır.


```latex
\[
\overrightarrow{AB} \quad \vec{a}
\]
```
\[
\overrightarrow{AB} \quad \vec{a}
\]

`\stackrel` komutu `\overset` gibi davranır.


```latex
\[
\int f_N(x) \stackrel{!}{=} 1
\]
```
\[
\int f_N(x) \stackrel{!}{=} 1
\]


## Matrisler

Temel matrisler `matrix` ortamında girilir. Bu ortamda elemanlar
otomatik ortalanır ve sütunlar normal bir tablo gibi dizilir. Her sütun
`&` karakteriyle ayrılır ve alt satıra geçmek için `\` komutu verilir.


```latex
\[
\begin{matrix}
a & b & c \\
d & e & f \\
g & h & i
\end{matrix}
\]
```
\[
\begin{matrix}
a & b & c \\
d & e & f \\
g & h & i
\end{matrix}
\]

Çeşitli matrisler dizmek için `matrix` ortamının farklı sürümleri
kullanılır: `pmatrix`, `bmatrix`, `Bmatrix`, `vmatrix` ve `Vmatrix`. Bu
ortamlar sırasıyla yuvarlak, köşeli, çengelli, dikey çubuklu ve çift
dikey çubuklu matrisler oluşturur.


```latex
\[
\begin{pmatrix}
1 & 2 \\
3 & 4
\end{pmatrix}
\]
```
\[
\begin{pmatrix}
1 & 2 \\
3 & 4
\end{pmatrix}
\]


```latex
\[
\begin{bmatrix}
1 & 2 \\
3 & 4
\end{bmatrix}
\]
```
\[
\begin{bmatrix}
1 & 2 \\
3 & 4
\end{bmatrix}
\]


```latex
\[
A=
\begin{bmatrix}
x_{11} & x_{12} & \dots \\
x_{21} & x_{22} & \dots \\
\vdots & \vdots & \ddots
\end{bmatrix}
\]
```
\[
A=
\begin{bmatrix}
x_{11} & x_{12} & \dots \\
x_{21} & x_{22} & \dots \\
\vdots & \vdots & \ddots
\end{bmatrix}
\]

Küçük bir matris yazmak için `smallmatrix` ortamı kullanılır. Bu
matriste parantezler elle eklenmelidir.


```latex
Şimdi yazacağımız matris
\(A=\big(
\begin{smallmatrix}
a & b \\
c & d
\end{smallmatrix}
\bigr)\)
küçük bir matristir.
```
Şimdi yazacağımız matris
\(A=\bigl(
\begin{smallmatrix}
a & b \\
c & d
\end{smallmatrix}
\bigr)\)
küçük bir matristir.

Bazı durumlarda, hizalamayı elle yapmak ve sütunlar veya satırlar
arasına çizgi çekmek istenebilir. Bu durumda `tabular` ortamının
matematik sürümü olan `array` ortamını kullanılmalıdır.


```latex
\[
\left(\begin{array}{r|r}
-1&2\\\hline
3&-4
\end{array}\right)
\]
```
\[
\left(\begin{array}{r|r}
-1&2\\\hline
3&-4
\end{array}\right)
\]

## Yazı Biçem ve Boyutları

Matematiksel ifadeleri dizerken bazen yazının biçemini ya da boyutunu
değiştirmek isteyebilirsiniz.

LaTeX'de matematik kipindeki yazıların biçemleri aşağıdaki komutlar
kullanılarak değiştirilir.



|      |               |
|  :--   |  :--      |
|  `\mathnormal{ABC def 123}` |  $ABC def 123$|
 | `\mathrm{ABC def 123}`      | $\mathrm{ABC def 123}$|
|  `\mathit{ABC def 123}`      | $\mathit{ABC def 123}$|
|  `\mathbf{ABC def 123}`     |  $\mathbf{ABC def 123}$|
|  `\mathtt{ABC def 123}`     |  $\mathtt{ABC def 123}$|
|  `\mathsf{ABC def 123}`     |  $\mathsf{ABC def 123}$|
|  `\mathfrak{ABC def 123}`   |  $\mathfrak{ABC def 123}$|
|  `\mathbb{ABC}`             |  $\mathbb{ABC}$|
 | `\mathcal{ABC}`            |  $\mathcal{ABC}$|
|  `\mathscr{ABC}`           |   $\mathscr{ABC}$|

Son satırdaki komutun kullanılabilmesi için


```latex
\usepackage{mathrsfs}
```




komutuyla **mathrsfs** paketi eklenmiş olmalıdır.

Bu komutlarla girilen ifadelerdeki boşluklar yine dikkate alınmaz ve
yine aksanlı harfler girilemez.

Matematik kipindeki bir ifadenin hem kalın hem de italik yazılması için
`\boldsymbol` komutu kullanılmalıdır.


```latex
\[
\mu, M \qquad \mathbf{\mu}, \mathbf{M}\qquad
\boldsymbol{\mu}, \boldsymbol{M}
\]
```
\[
\mu, M \qquad \mathbf{\mu}, \mathbf{M}\qquad
\boldsymbol{\mu}, \boldsymbol{M}
\]

Matematik kipindeki yazının boyutunu elle ayarlayabileceğiniz dört komut
vardır: `\displaystyle`, `\textstyle`, `\scriptstyle` ve
`\scriptscriptstyle`. `\textstyle` komutu ifadeyi normal metin boyutunda
dizer, `\displaystyle` komutu ise ifadeyi ayrı satırda sergilenir gibi
büyük dizer. `\scriptstyle` ve `\scriptscriptstyle` komutları da normal
metin boyutundan küçük dizerler.

```latex
\[
\sum_{k=0}^n z^k \qquad \textstyle\sum_{k=0}^n z^k
\]
$\displaystyle\sum_{k=0}^n z^k$\qquad 
$\sum_{k=0}^n z^k$ \qquad
$\scriptstyle\sum_{k=0}^n z^k$
```
\[
\sum_{k=0}^n z^k \qquad \textstyle\sum_{k=0}^n z^k
\]
$\displaystyle\sum_{k=0}^n z^k\qquad$ 
$\sum_{k=0}^n z^k\qquad$ 
$\scriptstyle\sum_{k=0}^n z^k$

Kesirler dizilirken `{\displaystyle\frac{…}{…}}` ve
`{\textstyle\frac{…}{…}}` komutları yerine onların kısaltmaları olan
`\dfrac` ve `\tfrac` komutları kullanılabilir. Aynı şey `\binom` komutu
için de geçerlidir.


```latex
$\frac{1}{n}\log x$ \quad
$\dfrac{1}{n}\log x$ \quad
$\binom{n}{3}$ \quad
$\dbinom{n}{3}$
\[
\frac{1}{n}\log x \quad
\tfrac{1}{n}\log x \quad
\binom{n}{3} \quad
\tbinom{n}{3}
\]
```

$\frac{1}{n}\log x\quad$ 
$\dfrac{1}{n}\log x\quad$ 
$\binom{n}{3}\quad$ 
$\dbinom{n}{3}$
\[
\frac{1}{n}\log x \quad
\tfrac{1}{n}\log x \quad
\binom{n}{3} \quad
\tbinom{n}{3}
\]


## Boşluklar


Bazen LaTeX formülleri dizerken olması gerektiği gibi boşluk bırakma
konusunda yetersiz kalabilir. Bu durumda boşluklar elle oluşturulur.
Boşluklar için kullanılabilecek komutlar tablodaki gibidir.

|         |              |
|  :--    |    :--        |
|  Negatif    |    `\!`  |
|  İnce        |   `\,`|
 | Orta        |   `\:`|
|  Kalın        |  `\;`|
|  Sözcük arası |  `\`|
|  Bir quad   |    `\quad`|
 | İki quad    |   `\qquad`|


Örneğin `\,` komutunun bıraktığı ince boşluk bazı formüllerde çok
kullanışlıdır.


```latex
\[
\int_a^b f(x) dx \quad \sqrt{2} a
\quad \sqrt{\log x}
\]
\[
\int_a^b f(x)\,dx \quad
\sqrt{2}\,a \quad \sqrt{\,\log x}
\]
```
\[
\int_a^b f(x) dx \quad \sqrt{2} a
\quad \sqrt{\log x}
\]
\[
\int_a^b f(x)\,dx \quad
\sqrt{2}\,a \quad \sqrt{\,\log x}
\]

Negatif aralık bırakan `\!` komutu da fazla aralıklı ifadeleri birbirine
yaklaştırmak için kullanılır.


```latex
\[
x^2/2 \quad a/\sin b
\]
\[
x^2\!/2 \quad a/\!\sin b
\]
```
\[
x^2/2 \quad a/\sin b
\]
\[
x^2\!/2 \quad a/\!\sin b
\]

## Denklem Ortamları


Bir satıra sığmayacak kadar uzun bir formülü ya da birden çok satırdan
oluşan bir denklemi veya denklem sistemlerini hizalayıp dizmek için
LaTeX'de çeşitli ortamlar kullanılır.

`multline` ortamı bir formülü hizalanmamış bir kaç satıra ayırır.


```latex
\begin{multline}
f=a+b+c \\
+i+j+k+l \\
+x+y+z
\end{multline}
```
\begin{multline}
(\#eq:mult)
 f=a+b+c \\
 +i+j+k+l \\
 +x+y+z\qquad \qquad 
\end{multline}

Bu ortamda ilk satır sola, son satır sağa ve kalanlar ortalı hizalanır.
Denklemin numarası da son satırın sağına yazılır. Dekleme numara
verilmesi istenmiyorsa ortam `multline*` şeklinde kullanılmalıdır.

`split` ortamı denklemi dikey hizalanmış birden çok satırda dizer.


```latex
\begin{equation}
\begin{split}
 a&= b+c-d\\
  &= e-f\\
  &= g
\end{split}
\end{equation}
```
\begin{equation}
  \begin{split}
  a&= b+c-d\\
   &= e-f\\
   &= g
 \end{split}
 (\#eq:spl)
\end{equation}

Hizalama `&` karakteriyle yapılır (genelde `=` işaretinden hemen
önce kullanılır). Ortam mutlaka formülün numaralandırılmasından sorumlu
ya da numara vermeyen başka bir matematik ortamında kullanılması
gerekir.

`gather` ortamı birden fazla formülü birlikte gruplandırır, ortalar ve
her birini ayrı bir satırda numaralandırır. Yine `gather*` ortamı, aynı
türden numaralandırılmamış formüller üretir.


```latex
\begin{gather}
a=b+c \\
V+F-S=2
\end{gather}
```
\begin{gather}
a=b+c (\#eq:gat1)\\
V+F-S=2
(\#eq:gat2)
\end{gather}

`align` ortamı, iki veya daha fazla satırdan oluşan bir denklemi her bir
satırı hizalı ve numaralı şekilde dizmek için kullanılır. Hizalama aynı
şekilde `&` karakteriyle yapılır. Ortam yıldızlı (`align*`) şekilde
kullanılırsa hiçbir satır numaralandırılmaz.


```latex
\begin{align}
   a& = b+c+d \\
   e& = f \\
 x-1& = y+z 
\end{align}
```
\begin{align}
   a& = b+c+d(\#eq:ali1) \\
   e& = f (\#eq:ali2)\\
 x-1& = y+z (\#eq:ali3)
\end{align}

`align` ortamı aynı zamanda birden fazla özerk formül dizisini
birleştirmek için de kullanışlıdır. Bu durumda, `&` karakteri konumuna
bağlı olarak hizalama ve ayırıcı olmak üzere iki farklı işlev üstlenir.


```latex
\begin{align*}
 a &=b & c&=d & e&=f \\
 u &=v & w&=x & y&=z
\end{align*}
```
\begin{align*}
 a &=b & c&=d & e&=f \\
 u &=v & w&=x & y&=z
\end{align*}

`alignat` ortamı `align` ortamına benzer fakat sütun sayısını belirten
bir değişken alır (Bir satırda kullanılan `&` sayısının bir fazlasının
yarısı sütun sayısını vermelidir} ve denklemler arasındaki yatay
boşluğun kontrolünü sağlar. Eğer boşluk komutlarından biri kullanılmazsa
denklem sistemleri arasında boşluk bırakılmaz (örnekte boşluk komutu
olarak `\qquad` kullanılmıştır).


```latex
\begin{alignat*}{3}
  a&=b\qquad & c&=d\qquad & e&=f \\
  u&=v\qquad & w&=x\qquad & y&=z 
\end{alignat*}
```
\begin{alignat*}{3}
  a&=b\qquad & c&=d\qquad & e&=f \\
  u&=v\qquad & w&=x\qquad & y&=z 
\end{alignat*}

`flalign` ortamı `align` ortamına benzer ancak ilk denklem sistemini
sola ve son denklem sistemini sağa yaslar.



`aligned` ortamı yine `align` ortamına benzer fakat başka bir matematik
ortamında kullanılması gerekir.


```latex
\[
\left.
\begin{aligned}
 a&= b+1 \\
 a&= 2b
\end{aligned}
\right\}
\quad
\text{$a=2$ ve $b=1$.}
\]
```
\[
\left.
\begin{aligned}
 a&= b+1 \\
 a&= 2b
\end{aligned}
\right\}
\quad
\text{$a=2$ ve $b=1$.}
\]

`cases` ortamı parçalı fonksiyonları dizmek için kullanışlıdır. Ortamın
içine yazılan denklemlerin solunda uygun boyda bir çengelli parantez
açar. Sütunlar sola yaslıdır. Ortamın başka bir matematik ortamında
kullanılması gerekir.


```latex
\[
n!=
\begin{cases}
1 & \text{$n=0$ ise} \\
n(n-1)!& \text{$n\ge 1$ ise}
\end{cases}
\]
```
\[
n!=
\begin{cases}
1 & \text{$n=0$ ise} \\
n(n-1)!& \text{$n\ge 1$ ise}
\end{cases}
\]

Her satıra numara veren bir ortamda bazı satırların numarasız olması
istenirse bu satırların sonuna `\notag` ya da `\nonumber` komutları
verilir. `\tag` komutuyla ise keyfi bir numara ya da işaret yazılabilir.


```latex
\begin{align}
 x&=y\\
 z&=y+1 \notag\\
 w&=3 \tag{*}
\end{align}
```
\begin{align}
 x&=y(\#eq:align)\\
 z&=y+1 \notag\\
 w&=3 \tag{*}
\end{align}

Numaralı formüllere etiket yine `\label` komutuyla koyulur ve `\eqref`
komutuyla atıf yapılır.


```latex
\begin{align}
 a &= b+c \\
 c &= d  \label{eq:cd}\\
 e &= f+g
\end{align}
Yukarıdaki \eqref{eq:cd}
formülü\dots
```
\begin{align}
 a &= b+c (\#eq:abc)\\
 c &= d (\#eq:cd) \\
 e &= f+g (\#eq:efg)
\end{align}
Yukarıdaki \@ref(eq:cd)
formülü...

Aynı ortamda yer alan formüllerin 1, 2,... yerine 1.a,
1.b,... biçiminde numaralandırılması için ortamın
`subequations` ortamının içine yazılması gerekir.


```latex
\begin{subequations}
\label{eq:sub}
\begin{align}
 a &= b+c \\
 c &= d \label{eq:subb} \\
 e &= f+g
\end{align}
\end{subequations}
Formül~\eqref{eq:sub} ve
altformül~\eqref{eq:subb}\dots
```

## Teorem ve Benzeri Ortamlar


Gerçek bir matematik kitabı karıştırdıysanız "Teorem 2.1", "Sonuç 2.1.1"
gibi ifadelerle başlayan paragraflara rastlamış olmalısınız. Bunlar
metnin geri kalanından ayrılmış ve yanında sıralı sayılarla etiketli
paragraflardır. Bu, matematikte teoremler için yaygın olarak kullanılır,
ancak her şey için kullanılabilir.

LaTeX, herhangi bir teorem benzeri bildirimi kolayca tanımlamanıza izin
veren bir komut sunar: `\newtheorem`.

### Temel Teoremler

Öncelikle sahanlığa


``` latex
\usepackage{amsthm}
```


komutuyla `amsthm` paketini ekleyiniz.

En basit kullanım


```latex
\newtheorem{<ad>}{<başlık>}
```


komutunun sahanlığa verilmesidir. İlk değişken olan `<ad>`, referans
olarak kullanacağınız addır, ikinci değişken `<başlık>` ise LaTeX'in her
kullandığınızda yazdıracağı çıktıdır. `<ad>` değişkeni aksanlı bir harf
içermemelidir. Örneğin


```latex
\newtheorem{tanim}{Tanım}
```


komutunu sahanlığa verdiğinizde `tanim` ortamını LaTeX'e tanıtmış olur
ve bu ortamı kullandığınızda şöyle bir çıktı alırsınız:


```latex
\begin{tanim}
 İşte yeni bir tanım.
\end{tanim}
```

:::{.definition}
 İşte yeni bir tanım.
:::


Kullanılan teoreme (yukarıdaki örnekte Tanım) özel bir ad vermek ya da
not düşmek isteyebilirsiniz. Bu, ortam komutundan sonra köşeli
parantezler içinde belirtilebilir:


```latex
\begin{tanim}[Gauss]
 Gauss'un tanımı.
\end{tanim}
```

:::{.definition name="Gaus"}
 Gauss'un tanımı.
:::


### Sayaçlar

Sayaçlar, belge sınıfına göre varsayılan değerleri kullanır. Örneğin
`book` sınıfında bir teorem kullanıldığında "Teorem 2.3" (kitabın 2'inci
bölümünde yer alan 3'üncü teorem), `article` sınıfında bir teorem
kullanıldığında "Teorem 3" (makaledeki 3'üncü teorem) benzeri çıktılar
alınır. Varsayılan ayarları değiştirmek için sayacın takip etmesi
istenilen bölüm seviyesi (chapter, section gibi) belirtilebilir:


```latex
\newtheorem{<ad>}{<başlık>}[<sayaç>]
```


Örneğin `article` sınıfında sahanlığa


```latex
\newtheorem{teorem}{Teorem}[section]
```


komutunu verdiğinizde teoreminiz `\section` başlık seviyesinin numarasına göre numara alır.



Varsayılan olarak, her teorem kendi sayacını kullanır. Bununla birlikte,
benzer teoremlerin (örneğin Teoremler, Lemmalar ve Sonuçlar) bir sayacı
paylaşması yaygındır. Bu durumda, sonraki teoremleri şöyle tanımlayın:


```latex
\newtheorem{<ad>}[<sayaç>]{<başlık>}
```


Burada `<sayaç>` kullanılacak olan sayacın adıdır. Genelde ana teorem
adı olur. Örneğin sahanlıkta


```latex
\newtheorem{lemma}[teorem]{Lemma}
```


tanımlamasını yaparsanız (Bu komutu verebilmek için önceden `teorem` ortamı
tanımlanmış olmalıdır) artık Lemma'lar Teorem'lerle aynı sayacı kullanacaktır. 



`\newtheorem` komutu en fazla bir tane isteğe bağlı değişken içerebilir.
Ayrıca komut `\newtheorem*` şekilde kullanılırsa numara verilmeyen bir
teorem tanımlamış olur.

### Kanıtlar

Bir teoremin kanıtı `proof` ortamında yazılır. Genel kullanım şöyledir:


```latex
\begin{proof}
 İşte benim kanıtım.
\end{proof}
```



Bu ortamı kullandığınızda en sona kanıtın bittiği anlamında bir kare
(QED adıyla da bilinir) ekler ve Türkçe dil paketi ekli belgelerde
"Kanıt" adını yazar. Bu ad, `\proofname` komutunda saklı olup istenirse
değiştirilebilir:


```latex
\renewcommand{\proofname}{İspat}
```


Bu komuttan sonra kullanılan tüm `proof` ortamlarında artık "Kanıt"
yerine "İspat" yazar.




Ayrıca kanıtı tek seferliğine elle adlandırmak isterseniz, kendi adınızı
köşeli parantezler içine yazabilirsiniz:


```latex
\begin{proof}[İspat]
 İşte diğer ispatım.
\end{proof}
```



Kanıtın sonunu bildiren $\square$ işareti bazen son satırda yalnız
kalırsa, `\qedhere` komutuyla onu doğru yere oturtabilirsiniz:



```latex
\begin{proof}
 Sadeleştirme yapılırsa \[E=mc^2 \qedhere\]
\end{proof}
```




Özel bir QED sembolü kullanmak isterseniz `\qedsymbol` komutunu yeniden
tanımlayabilirsiniz.


```latex
\renewcommand{\qedsymbol}{$\blacksquare$}
\begin{proof}
 Siyah kare.
\end{proof}
```



Eğer sembolü gizlemek isterseniz `\renewcommand` komutunun son
değişkenini boş bırakmanız yeterli olur.

### Teorem Stilleri

Teorem stilleri `\theoremstyle` komutuyla değiştirilir. Bu komut,
`\newtheorem` komutu kullanarak tanımlanan ortamların çıktısını
değiştirme olanağını verir.


```latex
\theoremstyle{<stil adı>}
```


Buradaki `<stil adı>` kullanmak istediğiniz stildir. Bu komuttan sonra
tanımlanmış tüm teoremler bu stili kullanacaktır. LaTeX'de önceden
tanımlanmış stiller aşağıdakilerdir:

|             |                 |               |  
|  :---       |    :--          |  :--          | 
|**Stil Adı**  | **Açıklama**      |     **Görünüm**         |                
|  `plain`      |  Teoremler, lemmalar, önermeler vb. için kullanılır (varsayılan)  | Başlık düz ve kalın, gövde metni vurgulu|
|  `definition`  | Tanımlar ve örnekler için kullanılır|                              Başlık düz ve kalın, gövde metni düz|
|  `remark`     |  Açıklamalar ve notlar için kullanılır |                            Başlık vurgulu, gövde metni düz|


Örneğin sahanlığa


```latex
\theoremstyle{remark}
\newtheorem{notum}{Not}
```

komutlarını verip `notum` ortamını kullandığınızda başlık vurgulu, gövde metni düz olacaktır.




#### Özel Stiller

Kendi stilinizi tanımlamak için `\newtheoremstyle` komutunu
kullanabilirsiniz:


```latex
\newtheoremstyle{<stil adı>}% kullanılacak stilin adı
{<üst boşluk>}% teoremin üstünde bırakılacak boşluk. Örn:3pt.
{<alt boşluk>}% teoremin altında bırakılacak boşluk. Örn:3pt.
{<gövde yazı tipi>}% teorem gövdesinde kullanılacak yazı tipi.
 %Örn:\normalfont, \itshape...
{<girinti>}% Paragraf girintisi ölçüsü. Örn:0pt
{<başlık yazı tipi>}% teorem başlık yazı tipi.
 %Örn:\sffamily,\bfseries
{<noktalama>}% başlıktan sonraki noktalama.
 %Noktalama istenmezse boşluk bırakılabilir. Örn:\; 
{<boşluk>}% başlıktan sonraki boşluk. Örn:0.25em
{<manuel başlık>}% Elle başlık belirtilir.
```


Boş bırakılan herhangi bir değişken olursa varsayılan değerler alınır.
Son satırdaki `<manuel başlık>` değişkeni `\thmname`, `\thmnumber`
ve `\thmnote` komutlarıyla biçimlendirilir. Birinci komut başlığı,
ikinci komut numarayı, üçüncüsü ise notu biçimlendirmek içindir.

Not değişkeni her zaman isteğe bağlıdır, ancak başlık oluşturulurken
`\thmnote` komutuyla belirtilmezse varsayılan olarak görünmeyecektir.


```latex
\newtheoremstyle{benimstilim}
{5pt}% 
{5pt}% 
{\normalfont}% 
{} %
{\bfseries\sffamily}%
{\;}% 
{0.25em}% 
{\thmname{#1} \thmnumber{#2}\thmnote{---#3}.}%
\theoremstyle{benimstilim}%
\newtheorem{sonuc}{Sonuç}%
```
